name: EarDream CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: 'wrapper'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests (Skip for now)
      run: ./gradlew build -x test  # 테스트 일시적으로 스킵 (wallet 파일 없음)
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
        KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
        ORACLE_TNS_ADMIN: /opt/oracle/wallet  # EC2 서버의 wallet 경로
        SPRING_PROFILES_ACTIVE: dev

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build -x test
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
        KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
        ORACLE_TNS_ADMIN: ${{ secrets.ORACLE_TNS_ADMIN }}
        SPRING_PROFILES_ACTIVE: prod
      
    - name: Upload build artifacts
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/*.jar
        retention-days: 5

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/
        
    - name: Deploy to EC2
      run: |
        # Create SSH key file
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        # Test SSH connection first
        echo "Testing SSH connection..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'; whoami; pwd; ls -la /opt"
        
        # Create directories on server (single command)
        echo "Creating directories..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "sudo mkdir -p /opt/eardream /opt/oracle/wallet && sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /opt/eardream /opt/oracle/wallet"
        
        # Copy JAR file to server
        echo "Copying JAR file..."
        scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/*.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/opt/eardream/eardream.jar
        
        # Test Java availability
        echo "Testing Java installation..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "java -version && which java"
        
        # Start application (simplified)
        echo "Starting application..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
          cd /opt/eardream
          sudo pkill -f 'java.*eardream' || echo 'No running application found'
          
          nohup java -jar \
            -Dspring.profiles.active=prod \
            -Dserver.port=8080 \
            eardream.jar > app.log 2>&1 &
          
          echo 'Application started in background'
        "
        
        # Clean up
        rm -f private_key.pem

  notify:
    name: Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ EarDream deployment successful!"
        echo "🚀 Application is now live on production server"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ EarDream deployment failed!"
        echo "🔍 Check the deployment logs for details"