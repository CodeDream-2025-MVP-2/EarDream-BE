name: EarDream CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: 'wrapper'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build -x test
      
    - name: Upload build artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/*.jar
        retention-days: 5

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # Create application directory if not exists
          sudo mkdir -p /opt/eardream
          sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /opt/eardream
          
          # Stop existing service
          sudo systemctl stop eardream || echo "Service not running"
          
          # Backup current version
          if [ -f /opt/eardream/eardream.jar ]; then
            cp /opt/eardream/eardream.jar /opt/eardream/eardream.jar.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
    - name: Copy JAR to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT }}
        source: "build/libs/*.jar"
        target: "/tmp/"
        strip_components: 2
        
    - name: Start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # Move JAR to application directory
          sudo mv /tmp/*.jar /opt/eardream/eardream.jar
          
          # Set permissions
          sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /opt/eardream/eardream.jar
          sudo chmod +x /opt/eardream/eardream.jar
          
          # Start service
          sudo systemctl start eardream
          sudo systemctl enable eardream
          
          # Wait for startup
          sleep 30
          
          # Health check
          if curl -f http://localhost:8080/actuator/health; then
            echo "‚úÖ Deployment successful - Application is healthy"
          else
            echo "‚ùå Deployment failed - Application is not responding"
            # Rollback to previous version
            if [ -f /opt/eardream/eardream.jar.backup.* ]; then
              sudo systemctl stop eardream
              sudo mv /opt/eardream/eardream.jar.backup.* /opt/eardream/eardream.jar
              sudo systemctl start eardream
              echo "üîÑ Rolled back to previous version"
            fi
            exit 1
          fi

  notify:
    name: Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ EarDream deployment successful!"
        echo "üöÄ Application is now live on production server"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå EarDream deployment failed!"
        echo "üîç Check the deployment logs for details"